// lib/models/abono.dart
import 'dart:convert';

class Abono {
  final int? idAbono; // Make it nullable
  final int? idPedido;
  final String? metodoPago;
  final int? idImagen;
  final double? cantidadPagar;
  final String? urlImagen;

  Abono({
    this.idAbono, // Can be null for new abonos
    this.idPedido,
    this.metodoPago,
    this.idImagen,
    this.cantidadPagar,
    this.urlImagen,
  });

  factory Abono.fromJson(Map<String, dynamic> json) {
    return Abono(
      idAbono: json['idAbono'],
      idPedido: json['idPedido'],
      metodoPago: json['metodoPago'],
      idImagen: json['idImagen'],
      cantidadPagar: (json['cantidadPagar'] as num?)?.toDouble(),
      urlImagen: json['urlImagen'],
    );
  }

  // Use this for updating an existing Abono (when idAbono is present)
  Map<String, dynamic> toJson() {
    return {
      'idAbono': idAbono, // Include idAbono for updates
      'idPedido': idPedido,
      'metodoPago': metodoPago,
      'idImagen': idImagen,
      'cantidadPagar': cantidadPagar,
    };
  }

  // Use this specifically for creating a new Abono (when idAbono is generated by DB)
  Map<String, dynamic> toCreateJson() {
    return {
      // 'idAbono' is explicitly omitted here because the database generates it.
      // If the backend expects 'idAbono: 0' for new entities, you can include it as 0.
      // However, usually, omitting it is preferred for identity columns.
      // If you still get the error "The JSON value could not be converted to System.Int32. Path: $.idAbono",
      // try sending `idAbono: 0` if your backend handles it.
      // For now, let's omit it as it's the standard practice for Identity columns.
      'idPedido': idPedido,
      'metodoPago': metodoPago,
      'idImagen': idImagen,
      'cantidadPagar': cantidadPagar,
    };
  }
}